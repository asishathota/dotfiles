# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

###########################################################################################

########################################
# Custom Bash Prompt (final fixed version)
########################################

PROMPT_END_SYMBOL="❯"
GIT_BRANCH_SYMBOL=""  # or " "  if not rendering

# Function to get formatted working directory
prompt_dir() {
  # Convert /home/<username> to ~ manually (works even in WSL)
  local dir="$PWD"
  local home_prefix="$HOME"

  # Force remove trailing slash from $HOME for comparison
  home_prefix="${home_prefix%/}"

  if [[ "$dir" == "$home_prefix" || "$dir" == "$home_prefix/"* ]]; then
    dir="~${dir#$home_prefix}"
  fi

  local parent="${dir%/*}"
  local current="${dir##*/}"

  # Root directory
  if [[ "$dir" == "/" ]]; then
    printf "%b" "\[\e[38;2;0;175;240m\]/\[\e[0m\]"
    return
  fi

  # Home only (~)
  if [[ "$dir" == "~" ]]; then
    printf "%b" "\[\e[38;2;0;175;240m\]~\[\e[0m\]"
    return
  fi

  # Print with colors
  printf "%b" "\[\e[38;2;0;143;195m\]${parent}/\[\e[38;2;0;175;240m\]${current}\[\e[0m\]"
}

# Function for virtual environment
venv_prompt() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
    local venv_name
    venv_name=$(basename "$VIRTUAL_ENV")
    printf "%b" "\[\e[38;2;102;255;102m\](${venv_name})\[\e[0m\] "
  fi
}

# Function to get Git branch
git_branch() {
  local branch
  branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if [[ -n "$branch" ]]; then
    printf "%b" " \[\e[38;2;255;255;255m\]$GIT_BRANCH_SYMBOL \[\e[38;2;255;230;64m\](\[\e[38;2;102;255;102m\]${branch}\[\e[38;2;255;230;64m\])\[\e[0m\]" 
  fi
}

# Function to dynamically color ❯
set_prompt() {
  local prompt_color
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    prompt_color="\[\e[38;2;255;230;64m\]"   # Yellow in git repo
  else
    prompt_color="\[\e[38;2;255;255;255m\]" # White otherwise
  fi

  PS1="
$(venv_prompt)$(prompt_dir)$(git_branch)\n${prompt_color}${PROMPT_END_SYMBOL}\[\e[0m\] "
}

PROMPT_COMMAND=set_prompt
